"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataApiDeploy = exports.DeployResult = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const node_path_1 = require("node:path");
const node_util_1 = require("node:util");
const ts_types_1 = require("@salesforce/ts-types");
const JSZip = require("jszip");
const fs = require("graceful-fs");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const convert_1 = require("../convert");
const collections_1 = require("../collections");
const registry_1 = require("../registry");
const metadataTransfer_1 = require("./metadataTransfer");
const types_1 = require("./types");
const diagnosticUtil_1 = require("./diagnosticUtil");
const messages = new core_1.Messages('@salesforce/source-deploy-retrieve', 'sdr', new Map([["md_request_fail", "Metadata API request failed: %s"], ["error_convert_invalid_format", "Invalid conversion format '%s'"], ["error_could_not_infer_type", "%s: Could not infer a metadata type"], ["error_unexpected_child_type", "Unexpected child metadata [%s] found for parent type [%s]"], ["noParent", "Could not find parent type for %s (%s)"], ["error_expected_source_files", "%s: Expected source files for type '%s'"], ["error_failed_convert", "Component conversion failed: %s"], ["error_merge_metadata_target_unsupported", "Merge convert for metadata target format currently unsupported"], ["error_missing_adapter", "Missing adapter '%s' for metadata type '%s'"], ["error_missing_transformer", "Missing transformer '%s' for metadata type '%s'"], ["error_missing_type_definition", "Missing metadata type definition in registry for id '%s'."], ["error_missing_child_type_definition", "Type %s does not have a child type definition %s."], ["noChildTypes", "No child types found in registry for %s (reading %s at %s)"], ["error_no_metadata_xml_ignore", "Metadata xml file %s is forceignored but is required for %s."], ["noSourceIgnore", "%s metadata types require source files, but %s is forceignored."], ["noSourceIgnore.actions", "- Metadata types with content are composed of two files: a content file (ie MyApexClass.cls) and a -meta.xml file (i.e MyApexClass.cls-meta.xml). You must include both files in your .forceignore file. Or try appending \u201C\\*\u201D to your existing .forceignore entry.\n\nSee <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_exclude_source.htm> for examples"], ["error_path_not_found", "%s: File or folder not found"], ["noContentFound", "SourceComponent %s (metadata type = %s) is missing its content file."], ["noContentFound.actions", ["Ensure the content file exists in the expected location.", "If the content file is in your .forceignore file, ensure the meta-xml file is also ignored to completely exclude it."]], ["error_parsing_xml", "SourceComponent %s (metadata type = %s) does not have an associated metadata xml to parse"], ["error_expected_file_path", "%s: path is to a directory, expected a file"], ["error_expected_directory_path", "%s: path is to a file, expected a directory"], ["error_directory_not_found_or_not_directory", "%s: path is not a directory"], ["error_no_directory_stream", "%s doesn't support readable streams on directories."], ["error_no_source_to_deploy", "No source-backed components present in the package."], ["error_no_components_to_retrieve", "No components in the package to retrieve."], ["error_static_resource_expected_archive_type", "A StaticResource directory must have a content type of application/zip or application/jar - found %s for %s."], ["error_static_resource_missing_resource_file", "A StaticResource must have an associated .resource file, missing %s.resource-meta.xml"], ["error_no_job_id", "The %s operation is missing a job ID. Initialize an operation with an ID, or start a new job."], ["invalid_xml_parsing", "error parsing %s due to:\\n message: %s\\n line: %s\\n code: %s"], ["zipBufferError", "Zip buffer was not created during conversion"], ["undefinedComponentSet", "Unable to construct a componentSet. Check the logs for more information."], ["replacementsFileNotRead", "The file \"%s\" specified in the \"replacements\" property of sfdx-project.json could not be read."], ["unsupportedBundleType", "Unsupported Bundle Type: %s"], ["filePathGeneratorNoTypeSupport", "Type not supported for filepath generation: %s"], ["missingFolderType", "The registry has %s as is inFolder but it does not have a folderType"], ["tooManyFiles", "Multiple files found for path: %s."], ["cantGetName", "Unable to calculate fullName from path: %s (%s)"], ["missingMetaFileSuffix", "The metadata registry is configured incorrectly for %s. Expected a metaFileSuffix."], ["uniqueIdElementNotInRegistry", "No uniqueIdElement found in registry for %s (reading %s at %s)."], ["uniqueIdElementNotInChild", "The uniqueIdElement %s was not found the child (reading %s at %s)."], ["suggest_type_header", "A metadata type lookup for \"%s\" found the following close matches:"], ["suggest_type_did_you_mean", "-- Did you mean \".%s%s\" instead for the \"%s\" metadata type?"], ["suggest_type_more_suggestions", "Additional suggestions:\nConfirm the file name, extension, and directory names are correct. Validate against the registry at:\n<https://github.com/forcedotcom/source-deploy-retrieve/blob/main/src/registry/metadataRegistry.json>\n\nIf the type is not listed in the registry, check that it has Metadata API support via the Metadata Coverage Report:\n<https://developer.salesforce.com/docs/metadata-coverage>\n\nIf the type is available via Metadata API but not in the registry\n\n- Open an issue <https://github.com/forcedotcom/cli/issues>\n- Add the type via PR. Instructions: <https://github.com/forcedotcom/source-deploy-retrieve/blob/main/contributing/metadata.md>"]]));
class DeployResult {
    constructor(response, components, replacements = new Map()) {
        this.response = response;
        this.components = components;
        this.replacements = replacements;
        this.diagnosticUtil = new diagnosticUtil_1.DiagnosticUtil('metadata');
        this.shouldConvertPaths = node_path_1.sep !== node_path_1.posix.sep;
    }
    getFileResponses() {
        // this involves FS operations, so only perform once!
        if (!this.fileResponses) {
            if (this.components) {
                // TODO: Log when messages can't be mapped to components
                const responseMessages = this.getDeployMessages(this.response);
                this.fileResponses = (this.components.getSourceComponents().toArray() ?? [])
                    .flatMap((deployedComponent) => this.createResponses(deployedComponent, responseMessages.get(this.key(deployedComponent)) ?? []).concat(deployedComponent.type.children
                    ? deployedComponent.getChildren().flatMap((child) => {
                        const childMessages = responseMessages.get(this.key(child));
                        return childMessages ? this.createResponses(child, childMessages) : [];
                    })
                    : []))
                    .concat(this.deleteNotFoundToFileResponses(responseMessages));
            }
            else {
                // if no this.components, this was likely a metadata format deploy so we need to process
                // the componentSuccesses and componentFailures instead.
                this.fileResponses = (0, kit_1.ensureArray)(this.response.details?.componentSuccesses)
                    .concat((0, kit_1.ensureArray)(this.response.details?.componentFailures))
                    .filter((c) => c.fullName !== 'package.xml')
                    .map((c) => ({
                    ...(getState(c) === types_1.ComponentStatus.Failed
                        ? {
                            error: c.problem,
                            problemType: c.problemType,
                            columnNumber: c.columnNumber ? parseInt(c.columnNumber, 10) : undefined,
                            lineNumber: c.lineNumber ? parseInt(c.lineNumber, 10) : undefined,
                        }
                        : {}),
                    fullName: c.fullName,
                    type: c.componentType,
                    state: getState(c),
                    filePath: c.fileName.replace(`zip${node_path_1.sep}`, ''),
                }));
            }
        }
        // removes duplicates from the file responses by parsing the object into a string, used as the key of the map
        return [...new Map(this.fileResponses.map((v) => [JSON.stringify(v), v])).values()];
    }
    createResponses(component, responseMessages) {
        const { fullName, type, xml, content } = component;
        const responses = [];
        for (const message of responseMessages) {
            const baseResponse = {
                fullName,
                type: type.name,
                state: getState(message),
            };
            if (baseResponse.state === types_1.ComponentStatus.Failed) {
                const diagnostic = this.diagnosticUtil.parseDeployDiagnostic(component, message);
                const response = Object.assign(baseResponse, diagnostic);
                responses.push(response);
            }
            else {
                // components with children are already taken care of through the messages,
                // so don't walk their content directories.
                if (content &&
                    (!type.children || Object.values(type.children.types).some((t) => t.unaddressableWithoutParent))) {
                    for (const filePath of component.walkContent()) {
                        const response = { ...baseResponse, filePath };
                        responses.push(response);
                    }
                }
                if (xml) {
                    const response = { ...baseResponse, filePath: xml };
                    responses.push(response);
                }
            }
        }
        return responses;
    }
    /**
     * Groups messages from the deploy result by component fullName and type
     */
    getDeployMessages(result) {
        const messageMap = new Map();
        const failedComponents = new collections_1.ComponentSet();
        const failureMessages = (0, kit_1.ensureArray)(result.details.componentFailures);
        const successMessages = (0, kit_1.ensureArray)(result.details.componentSuccesses);
        for (const failure of failureMessages) {
            const sanitized = sanitizeDeployMessage(failure);
            const componentLike = {
                fullName: sanitized.fullName,
                type: sanitized.componentType,
            };
            const key = this.key(componentLike);
            if (!messageMap.has(key)) {
                messageMap.set(key, []);
            }
            messageMap.get(key)?.push(sanitized);
            failedComponents.add(componentLike);
        }
        for (const success of successMessages) {
            const sanitized = sanitizeDeployMessage(success);
            const componentLike = {
                fullName: sanitized.fullName,
                type: sanitized.componentType,
            };
            const key = this.key(componentLike);
            // this will ensure successes aren't reported if there is a failure for
            // the same component. e.g. lwc returns failures and successes
            if (!failedComponents.has(componentLike)) {
                messageMap.set(key, [sanitized]);
            }
        }
        return messageMap;
    }
    /**
     * If a component fails to delete because it doesn't exist in the org, you get a message like
     * key: 'ApexClass#destructiveChanges.xml'
     * value:[{
     * fullName: 'destructiveChanges.xml',
     * fileName: 'destructiveChanges.xml',
     * componentType: 'ApexClass',
     * problem: 'No ApexClass named: test1 found',
     * problemType: 'Warning'
     * }]
     */
    deleteNotFoundToFileResponses(messageMap) {
        return Array.from(messageMap)
            .filter(([key]) => key.includes('destructiveChanges') && key.endsWith('.xml'))
            .flatMap(([, messageArray]) => messageArray.filter(isComponentNotFoundWarningMessage))
            .flatMap((message) => {
            const fullName = message.problem.replace(`No ${message.componentType} named: `, '').replace(' found', '');
            return this.components
                ? this.components
                    .getComponentFilenamesByNameAndType({ fullName, type: message.componentType })
                    .map((fileName) => ({
                    fullName,
                    type: message.componentType,
                    filePath: fileName,
                    state: types_1.ComponentStatus.Deleted,
                }))
                : [];
        });
    }
    key(component) {
        const type = typeof component.type === 'string' ? component.type : component.type.name;
        return `${type}#${this.shouldConvertPaths ? component.fullName.split(node_path_1.sep).join(node_path_1.posix.sep) : component.fullName}`;
    }
}
exports.DeployResult = DeployResult;
class MetadataApiDeploy extends metadataTransfer_1.MetadataTransfer {
    constructor(options) {
        super(options);
        this.replacements = new Map();
        options.apiOptions = { ...MetadataApiDeploy.DEFAULT_OPTIONS.apiOptions, ...options.apiOptions };
        this.options = Object.assign({}, options);
        this.isRestDeploy = !!options.apiOptions?.rest;
    }
    /**
     * Deploy recently validated components without running Apex tests. Requires the operation to have been
     * created with the `{ checkOnly: true }` API option.
     *
     * Ensure that the following requirements are met before deploying a recent validation:
     * - The components have been validated successfully for the target environment within the last 10 days.
     * - As part of the validation, Apex tests in the target org have passed.
     * - Code coverage requirements are met.
     * - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.
     * - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.
     *
     * See [deployRecentValidation()](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deployRecentValidation.htm)
     *
     * @param rest - Set to `true` to use the REST API, otherwise defaults to using SOAP
     * @returns The ID of the quick deployment
     */
    async deployRecentValidation(rest = false) {
        if (!this.id) {
            throw new core_1.SfError(messages.getMessage('error_no_job_id', ['deploy']), 'MissingJobIdError');
        }
        const conn = await this.getConnection();
        const response = (await conn.metadata.deployRecentValidation({
            id: this.id,
            rest,
        }));
        return (0, ts_types_1.isString)(response) ? response : response.id;
    }
    /**
     * Check the status of the deploy operation.
     *
     * @returns Status of the deploy
     */
    async checkStatus() {
        if (!this.id) {
            throw new core_1.SfError(messages.getMessage('error_no_job_id', ['deploy']), 'MissingJobIdError');
        }
        const connection = await this.getConnection();
        // Recasting to use the project's version of the type
        return connection.metadata.checkDeployStatus(this.id, true);
    }
    /**
     * Cancel the deploy operation.
     *
     * Deploys are asynchronously canceled. Once the cancel request is made to the org,
     * check the status of the cancellation with `checkStatus`.
     */
    async cancel() {
        if (!this.id) {
            throw new core_1.SfError(messages.getMessage('error_no_job_id', ['deploy']), 'MissingJobIdError');
        }
        const connection = await this.getConnection();
        // jsforce has an <any> on this
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,no-underscore-dangle
        await connection.metadata._invoke('cancelDeploy', { id: this.id });
    }
    async pre() {
        const LifecycleInstance = core_1.Lifecycle.getInstance();
        const connection = await this.getConnection();
        const apiVersion = connection.getApiVersion();
        // store for use in the scopedPostDeploy event
        this.orgId = connection.getAuthInfoFields().orgId;
        // If we have a ComponentSet but no version info, use the apiVersion from the Connection.
        if (this.components) {
            // this is the SOAP/REST API version of the connection
            this.components.apiVersion ??= apiVersion;
            // this is used as the version in the manifest (package.xml).
            this.components.sourceApiVersion ??= apiVersion;
        }
        // only do event hooks if source, (NOT a metadata format) deploy
        if (this.options.components) {
            await LifecycleInstance.emit('scopedPreDeploy', {
                componentSet: this.options.components,
                orgId: this.orgId,
            });
        }
        LifecycleInstance.on('replacement', async (replacement) => 
        // lifecycle have to be async, so wrapped in a promise
        new Promise((resolve) => {
            if (!this.replacements.has(replacement.filename)) {
                this.replacements.set(replacement.filename, new Set([replacement.replaced]));
            }
            else {
                this.replacements.get(replacement.filename)?.add(replacement.replaced);
            }
            resolve();
        }));
        const [zipBuffer] = await Promise.all([this.getZipBuffer(), this.maybeSaveTempDirectory('metadata')]);
        // SDR modifies what the mdapi expects by adding a rest param
        const { rest, ...optionsWithoutRest } = this.options.apiOptions ?? {};
        // Event and Debug output for API version and source API version used for deploy
        const manifestVersion = this.components?.sourceApiVersion;
        const webService = rest ? 'REST' : 'SOAP';
        const manifestMsg = manifestVersion ? ` in v${manifestVersion} shape` : '';
        const debugMsg = (0, node_util_1.format)(`Deploying metadata source%s using ${webService} v${apiVersion}`, manifestMsg);
        this.logger.debug(debugMsg);
        await LifecycleInstance.emit('apiVersionDeploy', { webService, manifestVersion, apiVersion });
        return this.isRestDeploy
            ? connection.metadata.deployRest(zipBuffer, optionsWithoutRest)
            : connection.metadata.deploy(zipBuffer, optionsWithoutRest);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async post(result) {
        const lifecycle = core_1.Lifecycle.getInstance();
        const connection = await this.getConnection();
        try {
            const apiVersion = connection.getApiVersion();
            // Creates an array of unique metadata types that were deployed, uses Set to avoid duplicates.
            let listOfMetadataTypesDeployed;
            if (this.options.components) {
                listOfMetadataTypesDeployed = Array.from(new Set(this.options.components.map((c) => c.type.name)));
            }
            else {
                // mdapi deploys don't have a ComponentSet, so using the result
                const types = new Set();
                const successes = (0, kit_1.ensureArray)(result.details?.componentSuccesses);
                const failures = (0, kit_1.ensureArray)(result.details?.componentFailures);
                [...successes, ...failures].forEach((c) => c.componentType && types.add(c.componentType));
                listOfMetadataTypesDeployed = Array.from(types);
            }
            void lifecycle.emitTelemetry({
                eventName: 'metadata_api_deploy_result',
                library: 'SDR',
                status: result.status,
                apiVersion,
                sourceApiVersion: this.components?.sourceApiVersion,
                createdDate: result.createdDate,
                startDate: result.startDate,
                completedDate: result.completedDate,
                rollbackOnError: result.rollbackOnError,
                runTestsEnabled: result.runTestsEnabled,
                isRestDeploy: this.isRestDeploy,
                checkOnly: result.checkOnly,
                done: result.done,
                ignoreWarnings: result.ignoreWarnings,
                metadataTypesDeployed: listOfMetadataTypesDeployed.toString(),
                numberComponentErrors: result.numberComponentErrors,
                numberComponentsDeployed: result.numberComponentsDeployed,
                numberComponentsTotal: result.numberComponentsTotal,
                numberTestErrors: result.numberTestErrors,
                numberTestsCompleted: result.numberTestsCompleted,
                numberTestsTotal: result.numberTestsTotal,
                testsTotalTime: result.details?.runTestResult?.totalTime,
                filesWithReplacementsQuantity: this.replacements.size ?? 0,
            });
        }
        catch (err) {
            const error = err;
            this.logger.debug(`Error trying to compile/send deploy telemetry data for deploy ID: ${this.id}\nError: ${error.message}`);
        }
        const deployResult = new DeployResult(result, this.components, new Map(Array.from(this.replacements).map(([k, v]) => [k, Array.from(v)])));
        // only do event hooks if source, (NOT a metadata format) deploy
        if (this.options.components) {
            // this may not be set if you resume a deploy so that `pre` is skipped.
            this.orgId ??= connection.getAuthInfoFields().orgId;
            // previous step ensures string exists
            if (this.orgId) {
                await lifecycle.emit('scopedPostDeploy', { deployResult, orgId: this.orgId });
            }
        }
        return deployResult;
    }
    async getZipBuffer() {
        const mdapiPath = this.options.mdapiPath;
        if (mdapiPath) {
            if (!fs.existsSync(mdapiPath) || !fs.lstatSync(mdapiPath).isDirectory()) {
                throw messages.createError('error_directory_not_found_or_not_directory', [mdapiPath]);
            }
            const zip = JSZip();
            const zipDirRecursive = (dir) => {
                const dirents = fs.readdirSync(dir, { withFileTypes: true });
                for (const dirent of dirents) {
                    const fullPath = (0, node_path_1.resolve)(dir, dirent.name);
                    if (dirent.isDirectory()) {
                        zipDirRecursive(fullPath);
                    }
                    else {
                        // Add relative file paths to a root of "zip" for MDAPI.
                        const relPath = (0, node_path_1.join)('zip', (0, node_path_1.relative)(mdapiPath, fullPath));
                        // Ensure only posix paths are added to zip files
                        const relPosixPath = relPath.replace(/\\/g, '/');
                        zip.file(relPosixPath, fs.createReadStream(fullPath));
                    }
                }
            };
            this.logger.debug('Zipping directory for metadata deploy:', mdapiPath);
            zipDirRecursive(mdapiPath);
            return zip.generateAsync({
                type: 'nodebuffer',
                compression: 'DEFLATE',
                compressionOptions: { level: 9 },
            });
        }
        // read the zip into a buffer
        if (this.options.zipPath) {
            if (!fs.existsSync(this.options.zipPath)) {
                throw new core_1.SfError(messages.getMessage('error_path_not_found', [this.options.zipPath]));
            }
            // does encoding matter for zip files? I don't know
            return fs.promises.readFile(this.options.zipPath);
        }
        if (this.options.components && this.components) {
            const converter = new convert_1.MetadataConverter();
            const { zipBuffer } = await converter.convert(this.components, 'metadata', { type: 'zip' });
            if (!zipBuffer) {
                throw new core_1.SfError(messages.getMessage('zipBufferError'));
            }
            return zipBuffer;
        }
        throw new Error('Options should include components, zipPath, or mdapiPath');
    }
}
exports.MetadataApiDeploy = MetadataApiDeploy;
MetadataApiDeploy.DEFAULT_OPTIONS = {
    apiOptions: {
        rollbackOnError: true,
        ignoreWarnings: false,
        checkOnly: false,
        singlePackage: true,
        rest: false,
    },
};
const getState = (message) => {
    if (message.created === 'true' || message.created === true) {
        return types_1.ComponentStatus.Created;
    }
    else if (message.changed === 'true' || message.changed === true) {
        return types_1.ComponentStatus.Changed;
    }
    else if (message.deleted === 'true' || message.deleted === true) {
        return types_1.ComponentStatus.Deleted;
    }
    else if (message.success === 'false' || message.success === false) {
        return types_1.ComponentStatus.Failed;
    }
    return types_1.ComponentStatus.Unchanged;
};
/**
 * Fix any issues with the deploy message returned by the api.
 * TODO: remove cases if fixes are made in the api.
 */
const sanitizeDeployMessage = (message) => {
    if (!hasComponentType(message)) {
        throw new core_1.SfError(`Missing componentType in deploy message ${message.fullName} ${message.fileName}`);
    }
    // mdapi error messages have the type as "FooSettings" but SDR only recognizes "Settings"
    if (message.componentType.endsWith('Settings') && message.fileName.endsWith('.settings')) {
        return {
            ...message,
            componentType: 'Settings',
        };
    }
    if (message.componentType === registry_1.registry.types.lightningcomponentbundle.name) {
        return {
            ...message,
            fullName: message.fullName.replace(/markup:\/\/[a-z|0-9|_]+:/i, ''),
        };
    }
    if (message.componentType === registry_1.registry.types.document.name) {
        return {
            ...message,
            // strip document extension from fullName
            fullName: (0, node_path_1.join)((0, node_path_1.dirname)(message.fullName), (0, node_path_1.basename)(message.fullName, (0, node_path_1.extname)(message.fullName))),
        };
    }
    // Treat emailTemplateFolder as EmailFolder
    if (message.componentType === registry_1.registry.types.emailtemplatefolder.name) {
        return {
            ...message,
            // strip document extension from fullName
            componentType: registry_1.registry.types.emailfolder.name,
        };
    }
    return message;
};
/* Type guard for asserting that a DeployMessages has a componentType, problem, and problemType === Warning*/
const isComponentNotFoundWarningMessage = (message) => hasComponentType(message) &&
    message.problemType === 'Warning' &&
    typeof message.problem === 'string' &&
    message.problem?.startsWith(`No ${message.componentType} named: `);
const hasComponentType = (message) => typeof message.componentType === 'string';
//# sourceMappingURL=metadataApiDeploy.js.map