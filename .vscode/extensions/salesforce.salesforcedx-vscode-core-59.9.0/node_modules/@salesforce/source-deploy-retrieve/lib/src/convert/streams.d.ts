/// <reference types="node" />
/// <reference types="node" />
import { pipeline as cbPipeline, Readable, Stream, Transform, Writable } from 'node:stream';
import { JsonMap } from '@salesforce/ts-types';
import { Logger } from '@salesforce/core';
import { MetadataResolver, SourceComponent } from '../resolve';
import { SourcePath } from '../common';
import { ComponentSet } from '../collections';
import { RegistryAccess } from '../registry';
import { ConvertContext } from './convertContext';
import { SfdxFileFormat, WriterFormat } from './types';
export declare const pipeline: typeof cbPipeline.__promisify__;
export declare const stream2buffer: (stream: Stream) => Promise<Buffer>;
export declare class ComponentConverter extends Transform {
    private targetFormat;
    private mergeSet?;
    private defaultDirectory?;
    readonly context: ConvertContext;
    private transformerFactory;
    constructor(targetFormat: SfdxFileFormat, registry: RegistryAccess, mergeSet?: ComponentSet | undefined, defaultDirectory?: string | undefined);
    _transform(chunk: SourceComponent, encoding: string, callback: (err: Error | undefined, data: WriterFormat) => void): Promise<void>;
    /**
     * Called at the end when all components have passed through the pipeline. Finalizers
     * take care of any additional work to be done at this stage e.g. recomposing child components.
     */
    _flush(callback: (err: Error | undefined, data?: WriterFormat) => void): Promise<void>;
}
export declare abstract class ComponentWriter extends Writable {
    forceIgnoredPaths: Set<string>;
    protected rootDestination?: SourcePath;
    protected logger: Logger;
    constructor(rootDestination?: SourcePath);
}
export declare class StandardWriter extends ComponentWriter {
    private resolver;
    converted: SourceComponent[];
    constructor(rootDestination: SourcePath, resolver?: MetadataResolver);
    _write(chunk: WriterFormat, encoding: string, callback: (err?: Error) => void): Promise<void>;
}
export declare class ZipWriter extends ComponentWriter {
    private zip;
    private zipBuffer?;
    constructor(rootDestination?: SourcePath);
    get buffer(): Buffer | undefined;
    _write(chunk: WriterFormat, encoding: string, callback: (err?: Error) => void): Promise<void>;
    _final(callback: (err?: Error) => void): Promise<void>;
    addToZip(contents: string | Readable | Buffer, path: SourcePath): void;
}
/**
 * Convenient wrapper to serialize a js object to XML content. Implemented as a stream
 * to be used as a valid source for ComponentWriters in the conversion pipeline,
 * even though it's not beneficial in the typical way a stream is.
 */
export declare class JsToXml extends Readable {
    private xmlObject;
    constructor(xmlObject: JsonMap);
    _read(): void;
}
