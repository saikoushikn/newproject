"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MixedContentSourceAdapter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const node_path_1 = require("node:path");
const core_1 = require("@salesforce/core");
const path_1 = require("../../utils/path");
const sourceComponent_1 = require("../sourceComponent");
const baseSourceAdapter_1 = require("./baseSourceAdapter");
const messages = new core_1.Messages('@salesforce/source-deploy-retrieve', 'sdr', new Map([["md_request_fail", "Metadata API request failed: %s"], ["error_convert_invalid_format", "Invalid conversion format '%s'"], ["error_could_not_infer_type", "%s: Could not infer a metadata type"], ["error_unexpected_child_type", "Unexpected child metadata [%s] found for parent type [%s]"], ["noParent", "Could not find parent type for %s (%s)"], ["error_expected_source_files", "%s: Expected source files for type '%s'"], ["error_failed_convert", "Component conversion failed: %s"], ["error_merge_metadata_target_unsupported", "Merge convert for metadata target format currently unsupported"], ["error_missing_adapter", "Missing adapter '%s' for metadata type '%s'"], ["error_missing_transformer", "Missing transformer '%s' for metadata type '%s'"], ["error_missing_type_definition", "Missing metadata type definition in registry for id '%s'."], ["error_missing_child_type_definition", "Type %s does not have a child type definition %s."], ["noChildTypes", "No child types found in registry for %s (reading %s at %s)"], ["error_no_metadata_xml_ignore", "Metadata xml file %s is forceignored but is required for %s."], ["noSourceIgnore", "%s metadata types require source files, but %s is forceignored."], ["noSourceIgnore.actions", "- Metadata types with content are composed of two files: a content file (ie MyApexClass.cls) and a -meta.xml file (i.e MyApexClass.cls-meta.xml). You must include both files in your .forceignore file. Or try appending \u201C\\*\u201D to your existing .forceignore entry.\n\nSee <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_exclude_source.htm> for examples"], ["error_path_not_found", "%s: File or folder not found"], ["noContentFound", "SourceComponent %s (metadata type = %s) is missing its content file."], ["noContentFound.actions", ["Ensure the content file exists in the expected location.", "If the content file is in your .forceignore file, ensure the meta-xml file is also ignored to completely exclude it."]], ["error_parsing_xml", "SourceComponent %s (metadata type = %s) does not have an associated metadata xml to parse"], ["error_expected_file_path", "%s: path is to a directory, expected a file"], ["error_expected_directory_path", "%s: path is to a file, expected a directory"], ["error_directory_not_found_or_not_directory", "%s: path is not a directory"], ["error_no_directory_stream", "%s doesn't support readable streams on directories."], ["error_no_source_to_deploy", "No source-backed components present in the package."], ["error_no_components_to_retrieve", "No components in the package to retrieve."], ["error_static_resource_expected_archive_type", "A StaticResource directory must have a content type of application/zip or application/jar - found %s for %s."], ["error_static_resource_missing_resource_file", "A StaticResource must have an associated .resource file, missing %s.resource-meta.xml"], ["error_no_job_id", "The %s operation is missing a job ID. Initialize an operation with an ID, or start a new job."], ["invalid_xml_parsing", "error parsing %s due to:\\n message: %s\\n line: %s\\n code: %s"], ["zipBufferError", "Zip buffer was not created during conversion"], ["undefinedComponentSet", "Unable to construct a componentSet. Check the logs for more information."], ["replacementsFileNotRead", "The file \"%s\" specified in the \"replacements\" property of sfdx-project.json could not be read."], ["unsupportedBundleType", "Unsupported Bundle Type: %s"], ["filePathGeneratorNoTypeSupport", "Type not supported for filepath generation: %s"], ["missingFolderType", "The registry has %s as is inFolder but it does not have a folderType"], ["tooManyFiles", "Multiple files found for path: %s."], ["cantGetName", "Unable to calculate fullName from path: %s (%s)"], ["missingMetaFileSuffix", "The metadata registry is configured incorrectly for %s. Expected a metaFileSuffix."], ["uniqueIdElementNotInRegistry", "No uniqueIdElement found in registry for %s (reading %s at %s)."], ["uniqueIdElementNotInChild", "The uniqueIdElement %s was not found the child (reading %s at %s)."], ["suggest_type_header", "A metadata type lookup for \"%s\" found the following close matches:"], ["suggest_type_did_you_mean", "-- Did you mean \".%s%s\" instead for the \"%s\" metadata type?"], ["suggest_type_more_suggestions", "Additional suggestions:\nConfirm the file name, extension, and directory names are correct. Validate against the registry at:\n<https://github.com/forcedotcom/source-deploy-retrieve/blob/main/src/registry/metadataRegistry.json>\n\nIf the type is not listed in the registry, check that it has Metadata API support via the Metadata Coverage Report:\n<https://developer.salesforce.com/docs/metadata-coverage>\n\nIf the type is available via Metadata API but not in the registry\n\n- Open an issue <https://github.com/forcedotcom/cli/issues>\n- Add the type via PR. Instructions: <https://github.com/forcedotcom/source-deploy-retrieve/blob/main/contributing/metadata.md>"]]));
/**
 * Handles types with mixed content. Mixed content means there are one or more additional
 * file(s) associated with a component with any file extension. Even an entire folder
 * can be considered "the content".
 *
 * __Example Types__:
 *
 * StaticResources, Documents, Bundle Types
 *
 * __Example Structures__:
 *
 *```text
 * foos/
 * ├── myFoo/
 * |   ├── fooFolder/
 * |      ├── foofighters.x
 * |   ├── foo.y
 * |   ├── fooBar.z
 * ├── myFoo.ext-meta.xml
 * bars/
 * ├── myBar.xyz
 * ├── myBar.ext2-meta.xml
 *```
 */
class MixedContentSourceAdapter extends baseSourceAdapter_1.BaseSourceAdapter {
    /**
     *
     * Returns undefined if no matching file is found
     */
    getRootMetadataXmlPath(trigger) {
        if (this.ownFolder) {
            const componentRoot = this.trimPathToContent(trigger);
            return this.tree.find('metadataXml', (0, node_path_1.basename)(componentRoot), componentRoot);
        }
        return this.findMetadataFromContent(trigger);
    }
    populate(trigger, component) {
        const trimmedPath = this.trimPathToContent(trigger);
        const contentPath = trimmedPath === component?.xml
            ? this.tree.find('content', (0, path_1.baseName)(trimmedPath), (0, node_path_1.dirname)(trimmedPath))
            : trimmedPath;
        // Content path might be undefined for staticResource where all files are ignored and only the xml is included.
        // Note that if contentPath is a directory that is not ignored, but all the files within it are
        // ignored (or it's an empty dir) contentPath will be truthy and the error will not be thrown.
        if (!contentPath || !this.tree.exists(contentPath)) {
            throw new core_1.SfError(messages.getMessage('error_expected_source_files', [trigger, this.type.name]), 'ExpectedSourceFilesError');
        }
        if (component) {
            component.content = contentPath;
        }
        else {
            component = new sourceComponent_1.SourceComponent({
                name: (0, path_1.baseName)(contentPath),
                type: this.type,
                content: contentPath,
                xml: this.type.metaFileSuffix && (0, node_path_1.join)(contentPath, this.type.metaFileSuffix),
            }, this.tree, this.forceIgnore);
        }
        return component;
    }
    /**
     * Trim a path up until the root of a component's content. If the content is a file,
     * the given path will be returned back. If the content is a folder, the path to that
     * folder will be returned. Intended to be used exclusively for MixedContent types.
     *
     * @param path Path to trim
     * @param type MetadataType to determine content for
     */
    trimPathToContent(path) {
        const pathParts = path.split(node_path_1.sep);
        const typeFolderIndex = pathParts.lastIndexOf(this.type.directoryName);
        const offset = this.type.inFolder ? 3 : 2;
        return pathParts.slice(0, typeFolderIndex + offset).join(node_path_1.sep);
    }
    /**
     * A utility for finding a component's root metadata xml from a path to a component's
     * content. "Content" can either be a single file or an entire directory. If the content
     * is a directory, the path can be files or other directories inside of it.
     *
     * Returns undefined if no matching file is found
     *
     * @param path Path to content or a child of the content
     */
    findMetadataFromContent(path) {
        const rootContentPath = this.trimPathToContent(path);
        const rootTypeDirectory = (0, node_path_1.dirname)(rootContentPath);
        const contentFullName = (0, path_1.baseName)(rootContentPath);
        return this.tree.find('metadataXml', contentFullName, rootTypeDirectory);
    }
}
exports.MixedContentSourceAdapter = MixedContentSourceAdapter;
//# sourceMappingURL=mixedContentSourceAdapter.js.map