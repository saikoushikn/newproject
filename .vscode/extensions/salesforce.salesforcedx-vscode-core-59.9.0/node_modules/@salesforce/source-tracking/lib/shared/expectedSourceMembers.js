"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateExpectedSourceMembers = void 0;
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const metadataKeys_1 = require("./metadataKeys");
const typesToNoPollFor = [
    'CustomObject',
    'EmailFolder',
    'EmailTemplateFolder',
    'StandardValueSet',
    'Portal',
    'StandardValueSetTranslation',
    'SharingRules',
    'SharingCriteriaRule',
    'GlobalValueSetTranslation',
    'AssignmentRules',
    'InstalledPackage',
    'DataCategoryGroup',
    'ManagedContentType',
    'CustomObjectTranslation',
    'TopicsForObjects',
];
const typesNotToPollForIfNamespace = ['CustomLabels', 'CustomMetadata', 'DuplicateRule', 'WebLink'];
const isEncodedTypeWithPercentSign = (type, filePath) => ['Layout', 'Profile', 'HomePageComponent', 'HomePageLayout', 'MilestoneType'].includes(type) &&
    Boolean(filePath?.includes('%'));
// aura xml aren't tracked as SourceMembers
const isSpecialAuraXml = (filePath) => Boolean(filePath &&
    (filePath.endsWith('.cmp-meta.xml') ||
        filePath.endsWith('.tokens-meta.xml') ||
        filePath.endsWith('.evt-meta.xml') ||
        filePath.endsWith('.app-meta.xml') ||
        filePath.endsWith('.intf-meta.xml')));
// things that never have SourceMembers
const excludedKeys = [
    'AppMenu__Salesforce1',
    'Profile__Standard',
    'Profile__Guest License User',
    'CustomTab__standard-home',
    'Profile__Minimum Access - Salesforce',
    'Profile__Salesforce API Only System Integrations',
    'AssignmentRules__Case',
    'ListView__CollaborationGroup.All_ChatterGroups',
    'CustomTab__standard-mailapp',
    'ApexEmailNotifications__apexEmailNotifications',
];
const calculateExpectedSourceMembers = (expectedMembers) => {
    const outstandingSourceMembers = new Map();
    expectedMembers
        .filter((fileResponse) => 
    // unchanged files will never be in the sourceMembers.  Not really sure why SDR returns them.
    fileResponse.state !== source_deploy_retrieve_1.ComponentStatus.Unchanged &&
        // if a listView is the only change inside an object, the object won't have a sourceMember change.  We won't wait for those to be found
        // we don't know which email folder type might be there, so don't require either
        // Portal doesn't support source tracking, according to the coverage report
        !typesToNoPollFor.includes(fileResponse.type) &&
        // don't wait for standard fields on standard objects
        !(fileResponse.type === 'CustomField' && !fileResponse.filePath?.includes('__c')) &&
        // deleted fields
        !(fileResponse.type === 'CustomField' && fileResponse.filePath?.includes('_del__c')) &&
        // built-in report type ReportType__screen_flows_prebuilt_crt
        !(fileResponse.type === 'ReportType' && fileResponse.filePath?.includes('screen_flows_prebuilt_crt')) &&
        // they're settings to mdapi, and FooSettings in sourceMembers
        !fileResponse.type.includes('Settings') &&
        !(fileResponse.type === 'NavigationMenu' && fileResponse.fullName.startsWith('SFDC_Default_Navigation_')) &&
        // mdapi encodes these, sourceMembers don't have encoding
        !isEncodedTypeWithPercentSign(fileResponse.type, fileResponse.filePath) &&
        !(typesNotToPollForIfNamespace.includes(fileResponse.type) && fileResponse.filePath?.includes('__')) &&
        // don't wait on workflow children
        !fileResponse.type.startsWith('Workflow') &&
        !isSpecialAuraXml(fileResponse.filePath))
        .map((member) => {
        (0, metadataKeys_1.getMetadataKeyFromFileResponse)(member)
            // remove some individual members known to not work with tracking even when their type does
            .filter((key) => 
        // CustomObject could have been re-added by the key generator from one of its fields
        !key.startsWith('CustomObject__') && !excludedKeys.includes(key))
            .map((key) => outstandingSourceMembers.set(key, member));
    });
    return outstandingSourceMembers;
};
exports.calculateExpectedSourceMembers = calculateExpectedSourceMembers;
//# sourceMappingURL=expectedSourceMembers.js.map